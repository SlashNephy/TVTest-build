diff --git a/TVTComment/Model/ChatCollectService/PastNichanChatCollectService.cs b/TVTComment/Model/ChatCollectService/PastNichanChatCollectService.cs
index a9096a2..449d812 100644
--- a/TVTComment/Model/ChatCollectService/PastNichanChatCollectService.cs
+++ b/TVTComment/Model/ChatCollectService/PastNichanChatCollectService.cs
@@ -1,4 +1,5 @@
-﻿using System;
+﻿using Nichan;
+using System;
 using System.Collections.Generic;
 using System.Drawing;
 using System.IO;
@@ -61,7 +62,6 @@ namespace TVTComment.Model.ChatCollectService
                 }
                 catch (AggregateException e)
                 {
-                    ResCollectLoopTaskExceptionHandler(e);
                     return Enumerable.Empty<Chat>();
                 }
             }
@@ -152,61 +152,56 @@ namespace TVTComment.Model.ChatCollectService
 
         private static async Task<Nichan.Thread> GetThread(string server, string board, string thread, CancellationToken cancellationToken)
         {
-            Nichan.Thread ret;
-            // まず2ch.scのdatから取得する
-            string datUrl = $"https://{server}.2ch.sc/{board}/dat/{thread}.dat";
-            string datResponse = null;
-
-            System.Diagnostics.Debug.WriteLine($"[PastNichanChatCollectService] HTTP Get {datUrl}");
-
-            try
-            {
-                datResponse = await httpClient.GetStringAsync(datUrl, cancellationToken).ConfigureAwait(false);
-            }
-            catch (HttpRequestException)
+            if (board != "livegalileo")
             {
-            }
-
-            if (datResponse != null)
-            {
-                ret = new Nichan.Thread() { Name = thread };
-                var datParser = new Nichan.DatParser();
-                datParser.Feed(datResponse);
+                // まず2ch.scのdatから取得する
+                string datUrl = $"https://{server}.2ch.sc/{board}/dat/{thread}.dat";
+                System.Diagnostics.Debug.WriteLine($"[PastNichanChatCollectService] HTTP Get {datUrl}");
 
-                ret.Uri = new Uri(datUrl);
-                ret.Title = datParser.ThreadTitle;
-                while (true)
+                try
+                {
+                    var datResponse = await httpClient.GetStringAsync(datUrl, cancellationToken).ConfigureAwait(false);
+                    
+                    var ret = new Nichan.Thread() { Name = thread };
+                    var datParser = new Nichan.DatParser();
+                    datParser.Feed(datResponse);
+
+                    ret.Uri = new Uri(datUrl);
+                    ret.Title = datParser.ThreadTitle;
+                    while (true)
+                    {
+                        Nichan.Res res = datParser.PopRes();
+                        if (res == null) break;
+                        ret.Res.Add(res);
+                    }
+                    ret.ResCount = ret.Res.Count;
+                    return ret;
+                }
+                catch (DatParserException)
+                {
+                }
+                catch (HttpRequestException)
                 {
-                    Nichan.Res res = datParser.PopRes();
-                    if (res == null) break;
-                    ret.Res.Add(res);
                 }
-                ret.ResCount = ret.Res.Count;
-                return ret;
             }
 
             // 2ch.scがダメだった場合、5ch.netのスクレイピング
             string gochanUrl = $"https://{server}.5ch.net/test/read.cgi/c/{board}/{thread}/";
-            string response;
 
             System.Diagnostics.Debug.WriteLine($"[PastNichanChatCollectService] HTTP Get {gochanUrl}");
 
             try
             {
-                response = await httpClient.GetStringAsync(gochanUrl, cancellationToken).ConfigureAwait(false);
+                var response = await httpClient.GetStringAsync(gochanUrl, cancellationToken);
+                using var textReader = new StringReader(response);
+                var ret = Nichan.ThreadParser.ParseFromStream(textReader);
+                ret.Uri = new Uri(gochanUrl);
+                return ret;
             }
-            catch (HttpRequestException e)
+            catch (HttpRequestException)
             {
-                if (e.StatusCode == null)
-                    throw new Nichan.NetworkException(gochanUrl, null, e);
-                else
-                    throw new Nichan.HttpErrorResponseException((int)e.StatusCode.Value, null, gochanUrl, null, e);
+                return default;
             }
-
-            using var textReader = new StringReader(response);
-            ret = Nichan.ThreadParser.ParseFromStream(textReader);
-            ret.Uri = new Uri(gochanUrl);
-            return ret;
         }
 
         /// <summary>
@@ -239,7 +234,13 @@ namespace TVTComment.Model.ChatCollectService
             ExceptionDispatchInfo.Capture(e).Throw(); // スタックトレースを保って再スロー
         }
 
-        private static readonly HttpClient httpClient = new HttpClient();
+        private static readonly HttpClient httpClient = new()
+        {
+            DefaultRequestHeaders =
+            {
+                {"User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"},
+            },
+        };
         private readonly NichanUtils.INichanThreadSelector threadSelector;
         private readonly TimeSpan threadSelectionUpdateInterval;
         private readonly List<Nichan.Thread> threadList = new List<Nichan.Thread>();
diff --git a/TVTComment/Model/Nichan/PastThreadLister.cs b/TVTComment/Model/Nichan/PastThreadLister.cs
index 8ee21be..3832446 100644
--- a/TVTComment/Model/Nichan/PastThreadLister.cs
+++ b/TVTComment/Model/Nichan/PastThreadLister.cs
@@ -76,7 +76,13 @@ namespace Nichan
             }
         }
 
-        private static readonly HttpClient httpClient = new HttpClient();
+        private static readonly HttpClient httpClient = new()
+        {
+            DefaultRequestHeaders =
+            {
+                {"User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"},
+            },
+        };
         private readonly ArchivedThreadListRetriever threadListRetriever;
         private readonly TimeSpan backTime;
         /// <summary>
@@ -90,7 +96,7 @@ namespace Nichan
             var reses = new List<Res>();
 
             Match match = reThreadUrl.Match(threadUrl);
-            if (match.Success)
+            if (match.Success && match.Groups["board"].Value != "livegalileo")
             {
                 // まず2ch.scのdatから取得する
                 (string server, string board, string threadId) = (match.Groups["server"].Value, match.Groups["board"].Value, match.Groups["thread"].Value);
@@ -105,6 +111,7 @@ namespace Nichan
                 }
                 catch (HttpRequestException)
                 {
+                    return (default, default);
                 }
 
                 if (datResponse != null)
@@ -137,12 +144,9 @@ namespace Nichan
                 {
                     response = await httpClient.GetStringAsync(threadUrl, cancellationToken).ConfigureAwait(false);
                 }
-                catch (HttpRequestException e)
+                catch (HttpRequestException)
                 {
-                    if (e.StatusCode == null)
-                        throw new NetworkException(threadUrl, null, e);
-                    else
-                        throw new HttpErrorResponseException((int)e.StatusCode.Value, null, threadUrl, null, e);
+                    return (default, default);
                 }
 
                 using var textReader = new StringReader(response);
@@ -152,10 +156,10 @@ namespace Nichan
 
             var firstRes = reses[0];
             var lastRes = reses.FindLast(x => x.Number <= 1000 && x.Date != null);
-            var start = firstRes.Date == null ? null : (DateTimeOffset?)new DateTimeOffset(firstRes.Date.Value, TimeSpan.FromHours(9));
-            var end = lastRes.Date == null ? null : (DateTimeOffset?)new DateTimeOffset(lastRes.Date.Value, TimeSpan.FromHours(9));
+            var start = firstRes.Date == null ? default : new DateTimeOffset(firstRes.Date.Value, TimeSpan.FromHours(9));
+            var end = lastRes.Date == null ? default : new DateTimeOffset(lastRes.Date.Value, TimeSpan.FromHours(9));
 
-            return (start.Value, end.Value);
+            return (start, end);
         }
     }
 }
